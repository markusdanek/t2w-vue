//----------------------------------------------------------------------
// Line Height
// Usage: @include line-height (16);
//
@mixin line-height($heightvalue: 12) {
    line-height: $heightvalue+px;
    line-height: (.125 * $heightvalue) + rem;
}
//----------------------------------------------------------------------
// Absolute Positioned
// Usage: @include abs-pos(10px, 10px, 5px, 15px);
//
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
    bottom: $bottom;
    left: $left;
    position: absolute;
    right: $right;
    top: $top;
}
//----------------------------------------------------------------------
// Center align a block level element
// Usage: @include center-block;
//
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
//----------------------------------------------------------------------
// Border Radius
// Usage: @include border-radius(5px);
// Usage: @include border-top-radius(10px);
//
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;
}
@mixin border-top-radius($radius) {
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
}
@mixin border-right-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    background-clip: padding-box;
}
@mixin border-left-radius($radius) {
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
}
//----------------------------------------------------------------------
// Box Sizing
// Usage: @include box-sizing(border-box);
//
@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model; // Safari <= 5
    -moz-box-sizing: $box-model; // Firefox <= 19
    box-sizing: $box-model;
}
//----------------------------------------------------------------------
// Opacity for IE, FF, Chome, Safari
// Usage: @include opacity(0.5);
//
@mixin opacity($value) {
    $IEValue: $value * 100;
    opacity: $value;
    -ms-filter:  "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $IEValue + ")";
    filter: alpha(opacity = $IEValue);
}
//----------------------------------------------------------------------
// Transition for IE, FF, Chome, Safari
// Usage: @include transition(all 0.5s ease);
//
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}
//----------------------------------------------------------------------
// Hide Element
// Usage: @include visually-hidden;
//
@mixin visually-hidden {
    position: absolute !important;
    clip: rect(1px 1px 1px 1px);
    clip: rect(1px, 1px, 1px, 1px);
    padding: 0 !important;
    border: 0 !important;
    height: 1px !important;
    width: 1px !important;
    overflow: hidden;
}
//----------------------------------------------------------------------
// Bouncing Animation
// Usage: animation: bounce 2s infinite;
//
@-webkit-keyframes bounce {
    0%,
    100%,
    20%,
    50%,
    80% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
    }

    40% {
        -webkit-transform: translateY(-30px);
        transform: translateY(-30px);
    }

    60% {
        -webkit-transform: translateY(-15px);
        transform: translateY(-15px);
    }
}
@-moz-keyframes bounce {
    0%,
    100%,
    20%,
    50%,
    80% {
        -moz-transform: translateY(0);
        transform: translateY(0);
    }

    40% {
        -moz-transform: translateY(-30px);
        transform: translateY(-30px);
    }

    60% {
        -moz-transform: translateY(-15px);
        transform: translateY(-15px);
    }
}
@keyframes bounce {
    0%,
    100%,
    20%,
    50%,
    80% {
        -moz-transform: translateY(0);
        -ms-transform: translateY(0);
        -webkit-transform: translateY(0);
        transform: translateY(0);
    }

    40% {
        -moz-transform: translateY(-30px);
        -ms-transform: translateY(-30px);
        -webkit-transform: translateY(-30px);
        transform: translateY(-30px);
    }

    60% {
        -moz-transform: translateY(-15px);
        -ms-transform: translateY(-15px);
        -webkit-transform: translateY(-15px);
        transform: translateY(-15px);
    }
}
//----------------------------------------------------------------------
// Flexbox Containers
// display: flex | inline-flex
//
@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

%flexbox {
    @include flexbox;
}
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%inline-flex {
    @include inline-flex;
}
//----------------------------------------------------------------------
// Flexbox Direction
// Values: row | row-reverse | column | column-reverse
// Default: row
//
@mixin flex-direction($value: row) {
     @if $value == row-reverse{
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    }
    @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    }
    @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    }
    @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex-dir($args...) {
     @include flex-direction($args...);
}
//----------------------------------------------------------------------
// Flexbox Wrap
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    }
    @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}
//----------------------------------------------------------------------
// Flexbox Flow (shorthand)
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}
//----------------------------------------------------------------------
// Flexbox Order
// Default: 0
//
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}
//----------------------------------------------------------------------
// Flexbox Grow
// Default: 0
//
@mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}
//----------------------------------------------------------------------
// Flexbox Shrink
// Default: 1
//
@mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
}
//----------------------------------------------------------------------
// Flexbox Basis
// Values: Like "width"
// Default: auto
//
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}
//----------------------------------------------------------------------
// Flexbox "Flex" (shorthand)
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
@mixin flex($fg: 1, $fs: null, $fb: null) {
    $fg-boxflex: $fg;

    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}
//----------------------------------------------------------------------
// Flexbox Justify Content
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
@mixin justify-content($value: flex-start) {
     @if $value == flex-start{
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    }
    @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    }
    @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    }
    @else if $value == space-around {
        -ms-flex-pack: distribute;
    }
    @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}
@mixin flex-just($args...) {
     @include justify-content($args...);
}
//----------------------------------------------------------------------
// Flexbox Align Items
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
@mixin align-items($value: stretch) {
     @if $value == flex-start{
        -webkit-box-align: start;
        -ms-flex-align: start;
    }
    @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    }
    @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}
//----------------------------------
// Flexbox Align Self
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
//
@mixin align-self($value: auto) {
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    }
    @else if $value == flex-end {
        -ms-flex-item-align: end;
    }
    @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}
//----------------------------------------------------------------------
// Flexbox Align Content
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
@mixin align-content($value: stretch) {
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    }
    @else if $value == flex-end {
        -ms-flex-line-pack: end;
    }
    @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}
